/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ListingStruct = {
  price: BigNumberish;
  timestamp: BigNumberish;
  tokenId: BigNumberish;
  accepted: boolean;
  listingType: BigNumberish;
  decreaseTime: BigNumberish;
  decreasePercentage: BigNumberish;
  minPrice: BigNumberish;
  maxPrice: BigNumberish;
};

export type ListingStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  price: BigNumber;
  timestamp: BigNumber;
  tokenId: BigNumber;
  accepted: boolean;
  listingType: number;
  decreaseTime: BigNumber;
  decreasePercentage: BigNumber;
  minPrice: BigNumber;
  maxPrice: BigNumber;
};

export type OfferStruct = {
  price: BigNumberish;
  timestamp: BigNumberish;
  expiration: BigNumberish;
  accepted: boolean;
  buyer: string;
};

export type OfferStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  string
] & {
  price: BigNumber;
  timestamp: BigNumber;
  expiration: BigNumber;
  accepted: boolean;
  buyer: string;
};

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EMERGENCY_ROLE()": FunctionFragment;
    "HIGH_ROLE()": FunctionFragment;
    "LOW_ROLE()": FunctionFragment;
    "acceptBid(address,uint256,uint256,address)": FunctionFragment;
    "cancelBid(address,uint256,uint256)": FunctionFragment;
    "changeBid(address,uint256,uint256,uint8)": FunctionFragment;
    "checkEscrowAmount(address)": FunctionFragment;
    "clearAllBids(address,uint256)": FunctionFragment;
    "clearAllListings(address,uint256)": FunctionFragment;
    "clearBidsAfterAcceptingOffer()": FunctionFragment;
    "collectionOwners(address)": FunctionFragment;
    "delistAfterAcceptingOffer()": FunctionFragment;
    "delistToken(address,uint256)": FunctionFragment;
    "devAddress()": FunctionFragment;
    "devFee()": FunctionFragment;
    "emergencyAddress()": FunctionFragment;
    "escrowedBid(address,uint256,uint256,uint8)": FunctionFragment;
    "featuredCollection()": FunctionFragment;
    "feesOn()": FunctionFragment;
    "getActiveListings(address)": FunctionFragment;
    "getCollectionFee(address)": FunctionFragment;
    "getCollectionOwner(address)": FunctionFragment;
    "getCurrentListing(address,uint256)": FunctionFragment;
    "getCurrentListingPrice(address,uint256)": FunctionFragment;
    "getDevFee()": FunctionFragment;
    "getMarketEscrow()": FunctionFragment;
    "getOffers(address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTokenListingHistory(address,uint256)": FunctionFragment;
    "getTotalFee(address)": FunctionFragment;
    "getUserNFTs(address,address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isCollectionTrading(address)": FunctionFragment;
    "isListed(address,uint256)": FunctionFragment;
    "listToken(address,uint256,uint256,uint8,uint256,uint256,uint256,uint256)": FunctionFragment;
    "maxAllowedOffers()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "purchaseListing(address,uint256)": FunctionFragment;
    "recoverNFT(address,uint256)": FunctionFragment;
    "recoverToken(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setClearBidsAfterAcceptingOffer(bool)": FunctionFragment;
    "setCollectionOwner(address,address)": FunctionFragment;
    "setCollectionOwnerFee(address,uint256)": FunctionFragment;
    "setCollectionTrading(address,bool)": FunctionFragment;
    "setDelistAfterAcceptingOffer(bool)": FunctionFragment;
    "setDevAddress(address)": FunctionFragment;
    "setDevFee(uint256)": FunctionFragment;
    "setEmergencyAddress(address)": FunctionFragment;
    "setFeaturedCollection(address)": FunctionFragment;
    "setFeesOn(bool)": FunctionFragment;
    "setMaxOffers(uint256)": FunctionFragment;
    "setWeth(address)": FunctionFragment;
    "startTrading()": FunctionFragment;
    "stopTrading()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalEscrowedAmount()": FunctionFragment;
    "tradingPaused()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HIGH_ROLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOW_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeBid",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkEscrowAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllBids",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearAllListings",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearBidsAfterAcceptingOffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delistAfterAcceptingOffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delistToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowedBid",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "featuredCollection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feesOn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveListings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentListingPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getDevFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMarketEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOffers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenListingHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTotalFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserNFTs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionTrading",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAllowedOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setClearBidsAfterAcceptingOffer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionOwnerFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionTrading",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelistAfterAcceptingOffer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeaturedCollection",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeesOn", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setMaxOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setWeth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEscrowedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HIGH_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOW_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkEscrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAllBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearBidsAfterAcceptingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistAfterAcceptingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "featuredCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feesOn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenListingHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxAllowedOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClearBidsAfterAcceptingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionOwnerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelistAfterAcceptingOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeaturedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeesOn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWeth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEscrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AddedMoneyToEscrow(address,uint256)": EventFragment;
    "BidCancelled(address,uint256,uint256,address,uint256)": EventFragment;
    "BidChanged(address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "BidPlaced(address,uint256,uint256,address,uint256)": EventFragment;
    "ChangedClearBidsAfterAcceptingOffer(bool)": EventFragment;
    "ChangedCollectionOwner(address,address)": EventFragment;
    "ChangedCollectionOwnerFee(address,uint256)": EventFragment;
    "ChangedDelistAfterAcceptingOffer(bool)": EventFragment;
    "ChangedDevAddress(address)": EventFragment;
    "ChangedDevFee(uint256)": EventFragment;
    "ChangedEmergencyAddress(address)": EventFragment;
    "ChangedFeaturedCollection(address)": EventFragment;
    "ChangedFeesOn(bool)": EventFragment;
    "ChangedMaxOffers(uint256)": EventFragment;
    "ClearedAllBids(address,uint256)": EventFragment;
    "ClearedAllListings(address,uint256)": EventFragment;
    "EscrowReturned(address,uint256)": EventFragment;
    "ReceivedETH(address,uint256)": EventFragment;
    "RecoveredETH(address,uint256)": EventFragment;
    "RecoveredToken(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenDelisted(address,uint256,uint256)": EventFragment;
    "TokenListed(address,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)": EventFragment;
    "TokenPurchased(address,address,uint256,address,uint256)": EventFragment;
    "TradingCollectionTrading(address,bool)": EventFragment;
    "TradingPausedChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedMoneyToEscrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangedClearBidsAfterAcceptingOffer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedCollectionOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedCollectionOwnerFee"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ChangedDelistAfterAcceptingOffer"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedDevAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedDevFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedEmergencyAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFeaturedCollection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFeesOn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedMaxOffers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearedAllBids"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearedAllListings"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveredToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingCollectionTrading"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingPausedChanged"): EventFragment;
}

export type AddedMoneyToEscrowEvent = TypedEvent<
  [string, BigNumber],
  { _owner: string; _amount: BigNumber }
>;

export type AddedMoneyToEscrowEventFilter =
  TypedEventFilter<AddedMoneyToEscrowEvent>;

export type BidCancelledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  {
    _token: string;
    _id: BigNumber;
    _price: BigNumber;
    _buyer: string;
    _timestamp: BigNumber;
  }
>;

export type BidCancelledEventFilter = TypedEventFilter<BidCancelledEvent>;

export type BidChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
  {
    _token: string;
    _id: BigNumber;
    _price: BigNumber;
    _oldPrice: BigNumber;
    _buyer: string;
    _timestamp: BigNumber;
  }
>;

export type BidChangedEventFilter = TypedEventFilter<BidChangedEvent>;

export type BidPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  {
    _token: string;
    _id: BigNumber;
    _price: BigNumber;
    _buyer: string;
    _timestamp: BigNumber;
  }
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export type ChangedClearBidsAfterAcceptingOfferEvent = TypedEvent<
  [boolean],
  { _value: boolean }
>;

export type ChangedClearBidsAfterAcceptingOfferEventFilter =
  TypedEventFilter<ChangedClearBidsAfterAcceptingOfferEvent>;

export type ChangedCollectionOwnerEvent = TypedEvent<
  [string, string],
  { _ca: string; _newOwner: string }
>;

export type ChangedCollectionOwnerEventFilter =
  TypedEventFilter<ChangedCollectionOwnerEvent>;

export type ChangedCollectionOwnerFeeEvent = TypedEvent<
  [string, BigNumber],
  { _ca: string; _fee: BigNumber }
>;

export type ChangedCollectionOwnerFeeEventFilter =
  TypedEventFilter<ChangedCollectionOwnerFeeEvent>;

export type ChangedDelistAfterAcceptingOfferEvent = TypedEvent<
  [boolean],
  { _value: boolean }
>;

export type ChangedDelistAfterAcceptingOfferEventFilter =
  TypedEventFilter<ChangedDelistAfterAcceptingOfferEvent>;

export type ChangedDevAddressEvent = TypedEvent<
  [string],
  { _newAddress: string }
>;

export type ChangedDevAddressEventFilter =
  TypedEventFilter<ChangedDevAddressEvent>;

export type ChangedDevFeeEvent = TypedEvent<
  [BigNumber],
  { _newFee: BigNumber }
>;

export type ChangedDevFeeEventFilter = TypedEventFilter<ChangedDevFeeEvent>;

export type ChangedEmergencyAddressEvent = TypedEvent<
  [string],
  { _newAddress: string }
>;

export type ChangedEmergencyAddressEventFilter =
  TypedEventFilter<ChangedEmergencyAddressEvent>;

export type ChangedFeaturedCollectionEvent = TypedEvent<
  [string],
  { _newCollection: string }
>;

export type ChangedFeaturedCollectionEventFilter =
  TypedEventFilter<ChangedFeaturedCollectionEvent>;

export type ChangedFeesOnEvent = TypedEvent<[boolean], { _value: boolean }>;

export type ChangedFeesOnEventFilter = TypedEventFilter<ChangedFeesOnEvent>;

export type ChangedMaxOffersEvent = TypedEvent<
  [BigNumber],
  { _newMaxOffers: BigNumber }
>;

export type ChangedMaxOffersEventFilter =
  TypedEventFilter<ChangedMaxOffersEvent>;

export type ClearedAllBidsEvent = TypedEvent<
  [string, BigNumber],
  { _ca: string; _tokenId: BigNumber }
>;

export type ClearedAllBidsEventFilter = TypedEventFilter<ClearedAllBidsEvent>;

export type ClearedAllListingsEvent = TypedEvent<
  [string, BigNumber],
  { _ca: string; _tokenId: BigNumber }
>;

export type ClearedAllListingsEventFilter =
  TypedEventFilter<ClearedAllListingsEvent>;

export type EscrowReturnedEvent = TypedEvent<
  [string, BigNumber],
  { _user: string; _price: BigNumber }
>;

export type EscrowReturnedEventFilter = TypedEventFilter<EscrowReturnedEvent>;

export type ReceivedETHEvent = TypedEvent<
  [string, BigNumber],
  { _sender: string; _amount: BigNumber }
>;

export type ReceivedETHEventFilter = TypedEventFilter<ReceivedETHEvent>;

export type RecoveredETHEvent = TypedEvent<
  [string, BigNumber],
  { _to: string; _amount: BigNumber }
>;

export type RecoveredETHEventFilter = TypedEventFilter<RecoveredETHEvent>;

export type RecoveredTokenEvent = TypedEvent<
  [string, BigNumber],
  { _token: string; _amount: BigNumber }
>;

export type RecoveredTokenEventFilter = TypedEventFilter<RecoveredTokenEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TokenDelistedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _token: string; _id: BigNumber; _timestamp: BigNumber }
>;

export type TokenDelistedEventFilter = TypedEventFilter<TokenDelistedEvent>;

export type TokenListedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    _token: string;
    _id: BigNumber;
    _price: BigNumber;
    _timestamp: BigNumber;
    _listingType: number;
    _decreaseTime: BigNumber;
    _decreasePercentage: BigNumber;
    _minPrice: BigNumber;
    _maxPrice: BigNumber;
  }
>;

export type TokenListedEventFilter = TypedEventFilter<TokenListedEvent>;

export type TokenPurchasedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  {
    _oldOwner: string;
    _newOwner: string;
    _price: BigNumber;
    _collection: string;
    _tokenId: BigNumber;
  }
>;

export type TokenPurchasedEventFilter = TypedEventFilter<TokenPurchasedEvent>;

export type TradingCollectionTradingEvent = TypedEvent<
  [string, boolean],
  { _ca: string; _value: boolean }
>;

export type TradingCollectionTradingEventFilter =
  TypedEventFilter<TradingCollectionTradingEvent>;

export type TradingPausedChangedEvent = TypedEvent<
  [boolean],
  { _paused: boolean }
>;

export type TradingPausedChangedEventFilter =
  TypedEventFilter<TradingPausedChangedEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    HIGH_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LOW_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeBid(
      _ca: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkEscrowAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearAllBids(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearAllListings(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearBidsAfterAcceptingOffer(overrides?: CallOverrides): Promise<[boolean]>;

    collectionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delistAfterAcceptingOffer(overrides?: CallOverrides): Promise<[boolean]>;

    delistToken(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddress(overrides?: CallOverrides): Promise<[string]>;

    devFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyAddress(overrides?: CallOverrides): Promise<[string]>;

    escrowedBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    featuredCollection(overrides?: CallOverrides): Promise<[string]>;

    feesOn(overrides?: CallOverrides): Promise<[boolean]>;

    getActiveListings(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getCollectionFee(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollectionOwner(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ListingStructOutput]>;

    getCurrentListingPrice(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDevFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketEscrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOffers(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OfferStructOutput[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenListingHistory(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ListingStructOutput[]]>;

    getTotalFee(_ca: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserNFTs(
      _owner: string,
      _ca: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCollectionTrading(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isListed(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listToken(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _listingType: BigNumberish,
      _decreaseTime: BigNumberish,
      _decreasePercentage: BigNumberish,
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxAllowedOffers(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverNFT(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClearBidsAfterAcceptingOffer(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionOwner(
      _ca: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionOwnerFee(
      _ca: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollectionTrading(
      _ca: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDelistAfterAcceptingOffer(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeaturedCollection(
      _ca: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesOn(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxOffers(
      _newMaxOffers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWeth(
      _wethToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalEscrowedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EMERGENCY_ROLE(overrides?: CallOverrides): Promise<string>;

  HIGH_ROLE(overrides?: CallOverrides): Promise<string>;

  LOW_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptBid(
    _ca: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _from: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    _ca: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeBid(
    _ca: string,
    _tokenId: BigNumberish,
    _newPrice: BigNumberish,
    _expirationOption: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkEscrowAmount(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearAllBids(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearAllListings(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearBidsAfterAcceptingOffer(overrides?: CallOverrides): Promise<boolean>;

  collectionOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

  delistAfterAcceptingOffer(overrides?: CallOverrides): Promise<boolean>;

  delistToken(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  devFee(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyAddress(overrides?: CallOverrides): Promise<string>;

  escrowedBid(
    _ca: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _expirationOption: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  featuredCollection(overrides?: CallOverrides): Promise<string>;

  feesOn(overrides?: CallOverrides): Promise<boolean>;

  getActiveListings(
    _ca: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getCollectionFee(_ca: string, overrides?: CallOverrides): Promise<BigNumber>;

  getCollectionOwner(_ca: string, overrides?: CallOverrides): Promise<string>;

  getCurrentListing(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ListingStructOutput>;

  getCurrentListingPrice(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDevFee(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketEscrow(overrides?: CallOverrides): Promise<BigNumber>;

  getOffers(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OfferStructOutput[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenListingHistory(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ListingStructOutput[]>;

  getTotalFee(_ca: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUserNFTs(
    _owner: string,
    _ca: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCollectionTrading(_ca: string, overrides?: CallOverrides): Promise<boolean>;

  isListed(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listToken(
    _ca: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _listingType: BigNumberish,
    _decreaseTime: BigNumberish,
    _decreasePercentage: BigNumberish,
    _minPrice: BigNumberish,
    _maxPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxAllowedOffers(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseListing(
    _ca: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverNFT(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoverToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClearBidsAfterAcceptingOffer(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionOwner(
    _ca: string,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionOwnerFee(
    _ca: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollectionTrading(
    _ca: string,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDelistAfterAcceptingOffer(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeaturedCollection(
    _ca: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesOn(
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxOffers(
    _newMaxOffers: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWeth(
    _wethToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalEscrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  tradingPaused(overrides?: CallOverrides): Promise<boolean>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<string>;

    HIGH_ROLE(overrides?: CallOverrides): Promise<string>;

    LOW_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _from: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeBid(
      _ca: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkEscrowAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearAllBids(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearAllListings(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearBidsAfterAcceptingOffer(overrides?: CallOverrides): Promise<boolean>;

    collectionOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

    delistAfterAcceptingOffer(overrides?: CallOverrides): Promise<boolean>;

    delistToken(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    devFee(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyAddress(overrides?: CallOverrides): Promise<string>;

    escrowedBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    featuredCollection(overrides?: CallOverrides): Promise<string>;

    feesOn(overrides?: CallOverrides): Promise<boolean>;

    getActiveListings(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getCollectionFee(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionOwner(_ca: string, overrides?: CallOverrides): Promise<string>;

    getCurrentListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ListingStructOutput>;

    getCurrentListingPrice(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    getOffers(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OfferStructOutput[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenListingHistory(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ListingStructOutput[]>;

    getTotalFee(_ca: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserNFTs(
      _owner: string,
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCollectionTrading(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isListed(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listToken(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _listingType: BigNumberish,
      _decreaseTime: BigNumberish,
      _decreasePercentage: BigNumberish,
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxAllowedOffers(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    purchaseListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverNFT(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setClearBidsAfterAcceptingOffer(
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionOwner(
      _ca: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionOwnerFee(
      _ca: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionTrading(
      _ca: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelistAfterAcceptingOffer(
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    setDevFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEmergencyAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeaturedCollection(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesOn(_value: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxOffers(
      _newMaxOffers: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeth(_wethToken: string, overrides?: CallOverrides): Promise<void>;

    startTrading(overrides?: CallOverrides): Promise<void>;

    stopTrading(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalEscrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tradingPaused(overrides?: CallOverrides): Promise<boolean>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedMoneyToEscrow(address,uint256)"(
      _owner?: string | null,
      _amount?: null
    ): AddedMoneyToEscrowEventFilter;
    AddedMoneyToEscrow(
      _owner?: string | null,
      _amount?: null
    ): AddedMoneyToEscrowEventFilter;

    "BidCancelled(address,uint256,uint256,address,uint256)"(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _buyer?: null,
      _timestamp?: null
    ): BidCancelledEventFilter;
    BidCancelled(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _buyer?: null,
      _timestamp?: null
    ): BidCancelledEventFilter;

    "BidChanged(address,uint256,uint256,uint256,address,uint256)"(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _oldPrice?: null,
      _buyer?: null,
      _timestamp?: null
    ): BidChangedEventFilter;
    BidChanged(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _oldPrice?: null,
      _buyer?: null,
      _timestamp?: null
    ): BidChangedEventFilter;

    "BidPlaced(address,uint256,uint256,address,uint256)"(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _buyer?: null,
      _timestamp?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _buyer?: null,
      _timestamp?: null
    ): BidPlacedEventFilter;

    "ChangedClearBidsAfterAcceptingOffer(bool)"(
      _value?: null
    ): ChangedClearBidsAfterAcceptingOfferEventFilter;
    ChangedClearBidsAfterAcceptingOffer(
      _value?: null
    ): ChangedClearBidsAfterAcceptingOfferEventFilter;

    "ChangedCollectionOwner(address,address)"(
      _ca?: string | null,
      _newOwner?: null
    ): ChangedCollectionOwnerEventFilter;
    ChangedCollectionOwner(
      _ca?: string | null,
      _newOwner?: null
    ): ChangedCollectionOwnerEventFilter;

    "ChangedCollectionOwnerFee(address,uint256)"(
      _ca?: string | null,
      _fee?: null
    ): ChangedCollectionOwnerFeeEventFilter;
    ChangedCollectionOwnerFee(
      _ca?: string | null,
      _fee?: null
    ): ChangedCollectionOwnerFeeEventFilter;

    "ChangedDelistAfterAcceptingOffer(bool)"(
      _value?: null
    ): ChangedDelistAfterAcceptingOfferEventFilter;
    ChangedDelistAfterAcceptingOffer(
      _value?: null
    ): ChangedDelistAfterAcceptingOfferEventFilter;

    "ChangedDevAddress(address)"(
      _newAddress?: null
    ): ChangedDevAddressEventFilter;
    ChangedDevAddress(_newAddress?: null): ChangedDevAddressEventFilter;

    "ChangedDevFee(uint256)"(_newFee?: null): ChangedDevFeeEventFilter;
    ChangedDevFee(_newFee?: null): ChangedDevFeeEventFilter;

    "ChangedEmergencyAddress(address)"(
      _newAddress?: null
    ): ChangedEmergencyAddressEventFilter;
    ChangedEmergencyAddress(
      _newAddress?: null
    ): ChangedEmergencyAddressEventFilter;

    "ChangedFeaturedCollection(address)"(
      _newCollection?: null
    ): ChangedFeaturedCollectionEventFilter;
    ChangedFeaturedCollection(
      _newCollection?: null
    ): ChangedFeaturedCollectionEventFilter;

    "ChangedFeesOn(bool)"(_value?: null): ChangedFeesOnEventFilter;
    ChangedFeesOn(_value?: null): ChangedFeesOnEventFilter;

    "ChangedMaxOffers(uint256)"(
      _newMaxOffers?: null
    ): ChangedMaxOffersEventFilter;
    ChangedMaxOffers(_newMaxOffers?: null): ChangedMaxOffersEventFilter;

    "ClearedAllBids(address,uint256)"(
      _ca?: string | null,
      _tokenId?: null
    ): ClearedAllBidsEventFilter;
    ClearedAllBids(
      _ca?: string | null,
      _tokenId?: null
    ): ClearedAllBidsEventFilter;

    "ClearedAllListings(address,uint256)"(
      _ca?: string | null,
      _tokenId?: null
    ): ClearedAllListingsEventFilter;
    ClearedAllListings(
      _ca?: string | null,
      _tokenId?: null
    ): ClearedAllListingsEventFilter;

    "EscrowReturned(address,uint256)"(
      _user?: string | null,
      _price?: BigNumberish | null
    ): EscrowReturnedEventFilter;
    EscrowReturned(
      _user?: string | null,
      _price?: BigNumberish | null
    ): EscrowReturnedEventFilter;

    "ReceivedETH(address,uint256)"(
      _sender?: string | null,
      _amount?: null
    ): ReceivedETHEventFilter;
    ReceivedETH(
      _sender?: string | null,
      _amount?: null
    ): ReceivedETHEventFilter;

    "RecoveredETH(address,uint256)"(
      _to?: string | null,
      _amount?: null
    ): RecoveredETHEventFilter;
    RecoveredETH(_to?: string | null, _amount?: null): RecoveredETHEventFilter;

    "RecoveredToken(address,uint256)"(
      _token?: string | null,
      _amount?: null
    ): RecoveredTokenEventFilter;
    RecoveredToken(
      _token?: string | null,
      _amount?: null
    ): RecoveredTokenEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TokenDelisted(address,uint256,uint256)"(
      _token?: string | null,
      _id?: BigNumberish | null,
      _timestamp?: null
    ): TokenDelistedEventFilter;
    TokenDelisted(
      _token?: string | null,
      _id?: BigNumberish | null,
      _timestamp?: null
    ): TokenDelistedEventFilter;

    "TokenListed(address,uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256)"(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _timestamp?: null,
      _listingType?: null,
      _decreaseTime?: null,
      _decreasePercentage?: null,
      _minPrice?: null,
      _maxPrice?: null
    ): TokenListedEventFilter;
    TokenListed(
      _token?: string | null,
      _id?: BigNumberish | null,
      _price?: BigNumberish | null,
      _timestamp?: null,
      _listingType?: null,
      _decreaseTime?: null,
      _decreasePercentage?: null,
      _minPrice?: null,
      _maxPrice?: null
    ): TokenListedEventFilter;

    "TokenPurchased(address,address,uint256,address,uint256)"(
      _oldOwner?: string | null,
      _newOwner?: string | null,
      _price?: BigNumberish | null,
      _collection?: null,
      _tokenId?: null
    ): TokenPurchasedEventFilter;
    TokenPurchased(
      _oldOwner?: string | null,
      _newOwner?: string | null,
      _price?: BigNumberish | null,
      _collection?: null,
      _tokenId?: null
    ): TokenPurchasedEventFilter;

    "TradingCollectionTrading(address,bool)"(
      _ca?: string | null,
      _value?: null
    ): TradingCollectionTradingEventFilter;
    TradingCollectionTrading(
      _ca?: string | null,
      _value?: null
    ): TradingCollectionTradingEventFilter;

    "TradingPausedChanged(bool)"(
      _paused?: null
    ): TradingPausedChangedEventFilter;
    TradingPausedChanged(_paused?: null): TradingPausedChangedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LOW_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeBid(
      _ca: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkEscrowAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearAllBids(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearAllListings(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearBidsAfterAcceptingOffer(overrides?: CallOverrides): Promise<BigNumber>;

    collectionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delistAfterAcceptingOffer(overrides?: CallOverrides): Promise<BigNumber>;

    delistToken(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    devFee(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    escrowedBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    featuredCollection(overrides?: CallOverrides): Promise<BigNumber>;

    feesOn(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveListings(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionFee(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionOwner(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentListingPrice(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    getOffers(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenListingHistory(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalFee(_ca: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserNFTs(
      _owner: string,
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollectionTrading(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isListed(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listToken(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _listingType: BigNumberish,
      _decreaseTime: BigNumberish,
      _decreasePercentage: BigNumberish,
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxAllowedOffers(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverNFT(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClearBidsAfterAcceptingOffer(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionOwner(
      _ca: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionOwnerFee(
      _ca: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollectionTrading(
      _ca: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDelistAfterAcceptingOffer(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeaturedCollection(
      _ca: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesOn(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxOffers(
      _newMaxOffers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWeth(
      _wethToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEscrowedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tradingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HIGH_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOW_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _from: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeBid(
      _ca: string,
      _tokenId: BigNumberish,
      _newPrice: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkEscrowAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearAllBids(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearAllListings(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearBidsAfterAcceptingOffer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistAfterAcceptingOffer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delistToken(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrowedBid(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _expirationOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    featuredCollection(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveListings(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionFee(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionOwner(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentListingPrice(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDevFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOffers(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenListingHistory(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalFee(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNFTs(
      _owner: string,
      _ca: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollectionTrading(
      _ca: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isListed(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listToken(
      _ca: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _listingType: BigNumberish,
      _decreaseTime: BigNumberish,
      _decreasePercentage: BigNumberish,
      _minPrice: BigNumberish,
      _maxPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxAllowedOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseListing(
      _ca: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverNFT(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClearBidsAfterAcceptingOffer(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionOwner(
      _ca: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionOwnerFee(
      _ca: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionTrading(
      _ca: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDelistAfterAcceptingOffer(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeaturedCollection(
      _ca: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesOn(
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxOffers(
      _newMaxOffers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWeth(
      _wethToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEscrowedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
