/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface EthernautsInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "availableSupply()": FunctionFragment;
    "availableToGift()": FunctionFragment;
    "availableToMint()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseTokenURI()": FunctionFragment;
    "batchSize()": FunctionFragment;
    "couponSigner()": FunctionFragment;
    "currentSaleState()": FunctionFragment;
    "earlyMintPrice()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "generateRandomNumber()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getAssetIdForTokenId(uint256)": FunctionFragment;
    "getBatchForToken(uint256)": FunctionFragment;
    "getMaxTokenIdInBatch(uint256)": FunctionFragment;
    "getRandomNumberCount()": FunctionFragment;
    "getRandomNumberForBatch(uint256)": FunctionFragment;
    "gift(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isCouponSignedForUser(address,bytes)": FunctionFragment;
    "isTokenRevealed(uint256)": FunctionFragment;
    "maxGiftableTokens()": FunctionFragment;
    "maxTokens()": FunctionFragment;
    "mint()": FunctionFragment;
    "mintEarly(bytes)": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "permanentURI()": FunctionFragment;
    "provenanceHash()": FunctionFragment;
    "recoverTokens(address,address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setCouponSigner(address)": FunctionFragment;
    "setEarlyMintPrice(uint256)": FunctionFragment;
    "setMintPrice(uint256)": FunctionFragment;
    "setPermanentURI()": FunctionFragment;
    "setSaleState(uint8)": FunctionFragment;
    "setUrlChanger(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensGifted()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "urlChanger()": FunctionFragment;
    "userRedeemedCoupon(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableToGift",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableToMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "batchSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "couponSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSaleState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlyMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetIdForTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchForToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTokenIdInBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumberForBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gift", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCouponSignedForUser",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenRevealed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGiftableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintEarly",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permanentURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provenanceHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCouponSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlyMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermanentURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUrlChanger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensGifted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "urlChanger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRedeemedCoupon",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableToGift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "couponSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSaleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetIdForTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTokenIdInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumberForBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gift", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCouponSignedForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenRevealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGiftableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintEarly", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permanentURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provenanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCouponSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlyMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermanentURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUrlChanger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensGifted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "urlChanger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRedeemedCoupon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BaseTokenURIChanged(string)": EventFragment;
    "CouponSignerChanged(address)": EventFragment;
    "ETHWithdrawn(address)": EventFragment;
    "EarlyMintPriceChanged(uint256)": EventFragment;
    "MintPriceChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PermanentURISet(bool)": EventFragment;
    "SaleStateChanged(uint8)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UrlChangerChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseTokenURIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CouponSignerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarlyMintPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermanentURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UrlChangerChanged"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BaseTokenURIChangedEvent = TypedEvent<
  [string],
  { baseTokenURI: string }
>;

export type BaseTokenURIChangedEventFilter =
  TypedEventFilter<BaseTokenURIChangedEvent>;

export type CouponSignerChangedEvent = TypedEvent<
  [string],
  { couponSigner: string }
>;

export type CouponSignerChangedEventFilter =
  TypedEventFilter<CouponSignerChangedEvent>;

export type ETHWithdrawnEvent = TypedEvent<[string], { beneficiary: string }>;

export type ETHWithdrawnEventFilter = TypedEventFilter<ETHWithdrawnEvent>;

export type EarlyMintPriceChangedEvent = TypedEvent<
  [BigNumber],
  { earlyMintPrice: BigNumber }
>;

export type EarlyMintPriceChangedEventFilter =
  TypedEventFilter<EarlyMintPriceChangedEvent>;

export type MintPriceChangedEvent = TypedEvent<
  [BigNumber],
  { mintPrice: BigNumber }
>;

export type MintPriceChangedEventFilter =
  TypedEventFilter<MintPriceChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PermanentURISetEvent = TypedEvent<[boolean], { value: boolean }>;

export type PermanentURISetEventFilter = TypedEventFilter<PermanentURISetEvent>;

export type SaleStateChangedEvent = TypedEvent<[number], { state: number }>;

export type SaleStateChangedEventFilter =
  TypedEventFilter<SaleStateChangedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UrlChangerChangedEvent = TypedEvent<
  [string],
  { urlChanger: string }
>;

export type UrlChangerChangedEventFilter =
  TypedEventFilter<UrlChangerChangedEvent>;

export interface Ethernauts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthernautsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableToGift(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableToMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTokenURI(overrides?: CallOverrides): Promise<[string]>;

    batchSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    couponSigner(overrides?: CallOverrides): Promise<[string]>;

    currentSaleState(overrides?: CallOverrides): Promise<[number]>;

    earlyMintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    generateRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetIdForTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { assetId: BigNumber; assetAvailable: boolean }
    >;

    getBatchForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxTokenIdInBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRandomNumberCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRandomNumberForBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gift(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCouponSignedForUser(
      user: string,
      coupon: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenRevealed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxGiftableTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintEarly(
      signedCoupon: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permanentURI(overrides?: CallOverrides): Promise<[boolean]>;

    provenanceHash(overrides?: CallOverrides): Promise<[string]>;

    recoverTokens(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      newBaseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCouponSigner(
      newCouponSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEarlyMintPrice(
      newEarlyMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintPrice(
      newMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermanentURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleState(
      newSaleState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUrlChanger(
      newUrlChanger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensGifted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    urlChanger(overrides?: CallOverrides): Promise<[string]>;

    userRedeemedCoupon(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

  availableToGift(overrides?: CallOverrides): Promise<BigNumber>;

  availableToMint(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenURI(overrides?: CallOverrides): Promise<string>;

  batchSize(overrides?: CallOverrides): Promise<BigNumber>;

  couponSigner(overrides?: CallOverrides): Promise<string>;

  currentSaleState(overrides?: CallOverrides): Promise<number>;

  earlyMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  generateRandomNumber(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetIdForTokenId(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { assetId: BigNumber; assetAvailable: boolean }
  >;

  getBatchForToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxTokenIdInBatch(
    batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRandomNumberCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRandomNumberForBatch(
    batchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gift(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCouponSignedForUser(
    user: string,
    coupon: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenRevealed(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxGiftableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokens(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintEarly(
    signedCoupon: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  permanentURI(overrides?: CallOverrides): Promise<boolean>;

  provenanceHash(overrides?: CallOverrides): Promise<string>;

  recoverTokens(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    newBaseTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCouponSigner(
    newCouponSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEarlyMintPrice(
    newEarlyMintPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintPrice(
    newMintPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermanentURI(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleState(
    newSaleState: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUrlChanger(
    newUrlChanger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensGifted(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  urlChanger(overrides?: CallOverrides): Promise<string>;

  userRedeemedCoupon(user: string, overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    availableToGift(overrides?: CallOverrides): Promise<BigNumber>;

    availableToMint(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<string>;

    batchSize(overrides?: CallOverrides): Promise<BigNumber>;

    couponSigner(overrides?: CallOverrides): Promise<string>;

    currentSaleState(overrides?: CallOverrides): Promise<number>;

    earlyMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    generateRandomNumber(overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetIdForTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { assetId: BigNumber; assetAvailable: boolean }
    >;

    getBatchForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTokenIdInBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNumberCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomNumberForBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gift(to: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCouponSignedForUser(
      user: string,
      coupon: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenRevealed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxGiftableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokens(overrides?: CallOverrides): Promise<BigNumber>;

    mint(overrides?: CallOverrides): Promise<void>;

    mintEarly(
      signedCoupon: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    permanentURI(overrides?: CallOverrides): Promise<boolean>;

    provenanceHash(overrides?: CallOverrides): Promise<string>;

    recoverTokens(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(
      newBaseTokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCouponSigner(
      newCouponSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarlyMintPrice(
      newEarlyMintPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintPrice(
      newMintPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermanentURI(overrides?: CallOverrides): Promise<void>;

    setSaleState(
      newSaleState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUrlChanger(
      newUrlChanger: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokensGifted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    urlChanger(overrides?: CallOverrides): Promise<string>;

    userRedeemedCoupon(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(beneficiary: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BaseTokenURIChanged(string)"(
      baseTokenURI?: null
    ): BaseTokenURIChangedEventFilter;
    BaseTokenURIChanged(baseTokenURI?: null): BaseTokenURIChangedEventFilter;

    "CouponSignerChanged(address)"(
      couponSigner?: null
    ): CouponSignerChangedEventFilter;
    CouponSignerChanged(couponSigner?: null): CouponSignerChangedEventFilter;

    "ETHWithdrawn(address)"(beneficiary?: null): ETHWithdrawnEventFilter;
    ETHWithdrawn(beneficiary?: null): ETHWithdrawnEventFilter;

    "EarlyMintPriceChanged(uint256)"(
      earlyMintPrice?: null
    ): EarlyMintPriceChangedEventFilter;
    EarlyMintPriceChanged(
      earlyMintPrice?: null
    ): EarlyMintPriceChangedEventFilter;

    "MintPriceChanged(uint256)"(mintPrice?: null): MintPriceChangedEventFilter;
    MintPriceChanged(mintPrice?: null): MintPriceChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PermanentURISet(bool)"(value?: null): PermanentURISetEventFilter;
    PermanentURISet(value?: null): PermanentURISetEventFilter;

    "SaleStateChanged(uint8)"(state?: null): SaleStateChangedEventFilter;
    SaleStateChanged(state?: null): SaleStateChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "UrlChangerChanged(address)"(
      urlChanger?: null
    ): UrlChangerChangedEventFilter;
    UrlChangerChanged(urlChanger?: null): UrlChangerChangedEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    availableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    availableToGift(overrides?: CallOverrides): Promise<BigNumber>;

    availableToMint(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenURI(overrides?: CallOverrides): Promise<BigNumber>;

    batchSize(overrides?: CallOverrides): Promise<BigNumber>;

    couponSigner(overrides?: CallOverrides): Promise<BigNumber>;

    currentSaleState(overrides?: CallOverrides): Promise<BigNumber>;

    earlyMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetIdForTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTokenIdInBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNumberCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomNumberForBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gift(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCouponSignedForUser(
      user: string,
      coupon: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenRevealed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGiftableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokens(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintEarly(
      signedCoupon: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permanentURI(overrides?: CallOverrides): Promise<BigNumber>;

    provenanceHash(overrides?: CallOverrides): Promise<BigNumber>;

    recoverTokens(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      newBaseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCouponSigner(
      newCouponSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEarlyMintPrice(
      newEarlyMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintPrice(
      newMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermanentURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleState(
      newSaleState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUrlChanger(
      newUrlChanger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensGifted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    urlChanger(overrides?: CallOverrides): Promise<BigNumber>;

    userRedeemedCoupon(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    availableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableToGift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableToMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    couponSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentSaleState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyMintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetIdForTokenId(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchForToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTokenIdInBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomNumberCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomNumberForBatch(
      batchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gift(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCouponSignedForUser(
      user: string,
      coupon: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenRevealed(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGiftableTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintEarly(
      signedCoupon: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permanentURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provenanceHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverTokens(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      newBaseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCouponSigner(
      newCouponSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEarlyMintPrice(
      newEarlyMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintPrice(
      newMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermanentURI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleState(
      newSaleState: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUrlChanger(
      newUrlChanger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensGifted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    urlChanger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRedeemedCoupon(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
